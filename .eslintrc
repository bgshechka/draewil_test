{
  "env": {
    "es6": true,
    "node": true,
    "mocha": true
  },
  "extends": ["eslint:recommended", "google"],
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "plugins": [
    "mocha"
  ],
  "rules": {
    // enforces return statements in callbacks of array's methods
    // https://eslint.org/docs/rules/array-callback-return
    "array-callback-return": [
      "error", { "allowImplicit": true }],

    // treat var statements as if they were block scoped
    "block-scoped-var": "error",

    // specify the maximum cyclomatic complexity allowed in a program
    "complexity": ["off", 11],

    // enforce that class methods use "this"
    // https://eslint.org/docs/rules/class-methods-use-this
    "class-methods-use-this": [
      "error", {
        "exceptMethods": []
      }],

    // require return statements to either always or never specify values
    "consistent-return": "error",

    // specify curly brace conventions for all control statements
    "curly": ["error", "multi-line"],

    // require default case in switch statements
    "default-case": ["error", { "commentPattern": "^no default$" }],

    // encourages use of dot notation whenever possible
    "dot-notation": ["error", { "allowKeywords": true }],

    // enforces consistent newlines before or after dots
    // https://eslint.org/docs/rules/dot-location
    "dot-location": ["error", "property"],

    // require the use of === and !==
    // https://eslint.org/docs/rules/eqeqeq
    "eqeqeq": ["error", "always", { "null": "ignore" }],

    // enforce a maximum number of classes per file
    // https://eslint.org/docs/rules/max-classes-per-file
    "max-classes-per-file": ["off", 1],

    // disallow the use of alert, confirm, and prompt
    "no-alert": "error",

    // disallow else after a return in an if
    // https://eslint.org/docs/rules/no-else-return
    "no-else-return": ["error", { "allowElseIf": false }],

    // disallow empty functions, except for standalone funcs/arrows
    // https://eslint.org/docs/rules/no-empty-function
    "no-empty-function": ["error", {
      "allow": [
        "arrowFunctions",
        "functions",
        "methods"
      ]
    }],

    // disallow use of eval()
    "no-eval": "error",

    // disallow Unnecessary Labels
    // https://eslint.org/docs/rules/no-extra-label
    "no-extra-label": "error",

    // disallow fallthrough of case statements
    "no-fallthrough": "error",

    // disallow the use of leading or trailing decimal points in numeric literals
    "no-floating-decimal": "error",

    // disallow reassignments of native objects or read-only globals
    // https://eslint.org/docs/rules/no-global-assign
    "no-global-assign": ["error", { "exceptions": [] }],

    // deprecated in favor of no-global-assign
    "no-native-reassign": "off",

    // disallow implicit type conversions
    // https://eslint.org/docs/rules/no-implicit-coercion
    "no-implicit-coercion": ["off", {
      "boolean": false,
      "number": true,
      "string": true,
      "allow": []
    }],

    // disallow use of eval()-like methods
    "no-implied-eval": "error",

    // disallow usage of __iterator__ property
    "no-iterator": "error",

    // disallow use of labels for anything other then loops and switches
    "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],

    // disallow unnecessary nested blocks
    "no-lone-blocks": "error",

    // disallow creation of functions within loops
    "no-loop-func": "error",

    // disallow magic numbers
    // https://eslint.org/docs/rules/no-magic-numbers
    "no-magic-numbers": ["off", {
      "ignore": [],
      "ignoreArrayIndexes": true,
      "enforceConst": true,
      "detectObjects": false
    }],

    // disallow use of new operator when not part of the assignment or comparison
    "no-new": "error",

    // disallow use of new operator for Function object
    "no-new-func": "error",

    // disallow use of octal escape sequences in string literals, such as
    // var foo = 'Copyright \251';
    "no-octal-escape": "error",

    // disallow reassignment of function parameters
    // disallow parameter object manipulation except for specific exclusions
    // rule: https://eslint.org/docs/rules/no-param-reassign.html
    "no-param-reassign": ["error", {
      "props": true,
      "ignorePropertyModificationsFor": [
        "acc", // for reduce accumulators
        "accumulator", // for reduce accumulators
        "e", // for e.returnvalue
        "ctx", // for Koa routing
        "req", // for Express requests
        "request", // for Express requests
        "res", // for Express responses
        "response", // for Express responses
        "$scope" // for Angular 1 scopes
      ]
    }],

    // disallow usage of __proto__ property
    "no-proto": "error",

    // disallow certain object properties
    // https://eslint.org/docs/rules/no-restricted-properties
    "no-restricted-properties": ["error", {
      "object": "arguments",
      "property": "callee",
      "message": "arguments.callee is deprecated"
    }, {
      "object": "global",
      "property": "isFinite",
      "message": "Please use Number.isFinite instead"
    }, {
      "object": "self",
      "property": "isFinite",
      "message": "Please use Number.isFinite instead"
    }, {
      "object": "window",
      "property": "isFinite",
      "message": "Please use Number.isFinite instead"
    }, {
      "object": "global",
      "property": "isNaN",
      "message": "Please use Number.isNaN instead"
    }, {
      "object": "self",
      "property": "isNaN",
      "message": "Please use Number.isNaN instead"
    }, {
      "object": "window",
      "property": "isNaN",
      "message": "Please use Number.isNaN instead"
    }, {
      "property": "__defineGetter__",
      "message": "Please use Object.defineProperty instead."
    }, {
      "property": "__defineSetter__",
      "message": "Please use Object.defineProperty instead."
    }, {
      "object": "Math",
      "property": "pow",
      "message": "Use the exponentiation operator (**) instead."
    }],

    // disallow use of assignment in return statement
    "no-return-assign": ["error", "always"],

    // disallow redundant `return await`
    "no-return-await": "error",

    // disallow comparisons where both sides are exactly the same
    "no-self-compare": "error",

    // disallow use of comma operator
    "no-sequences": "error",

    // disallow unused labels
    // https://eslint.org/docs/rules/no-unused-labels
    "no-unused-labels": "error",

    // disallow useless string concatenation
    // https://eslint.org/docs/rules/no-useless-concat
    "no-useless-concat": "error",

    // disallow redundant return; keywords
    // https://eslint.org/docs/rules/no-useless-return
    "no-useless-return": "error",

    // disallow use of void operator
    // https://eslint.org/docs/rules/no-void
    "no-void": "error",

    // disallow usage of configurable warning terms in comments: e.g. todo
    "no-warning-comments": ["off", {
      "terms": ["todo", "fixme", "xxx"],
      "location": "start"
    }],

    // require using Error objects as Promise rejection reasons
    // https://eslint.org/docs/rules/prefer-promise-reject-errors
    "prefer-promise-reject-errors": ["error", { "allowEmptyReject": true }],

    // require use of the second argument for parseInt()
    "radix": "error",

    // requires to declare all vars on top of their containing scope
    "vars-on-top": "error",

    // require immediate function invocation to be wrapped in parentheses
    // https://eslint.org/docs/rules/wrap-iife.html
    "wrap-iife": ["error", "outside", { "functionPrototypeMethods": false }],

    // require or disallow Yoda conditions
    "yoda": "error",

    // google rules redifinition
    "object-curly-spacing": 0,
    "arrow-parens": [2, "as-needed", { "requireForBlockBody": true }],
    "indent": [
      "error", 2, {
        "CallExpression": {
          "arguments": 1
        },
        "FunctionDeclaration": {
          "body": 1,
          "parameters": 1
        },
        "FunctionExpression": {
          "body": 1,
          "parameters": 1
        },
        "MemberExpression": 1,
        "ObjectExpression": 1,
        "SwitchCase": 1,
        "ignoredNodes": [
          "ConditionalExpression"
        ]
      }
    ],
    "new-cap": ["error", { "capIsNew": false }],
    "max-len": ["error", {
      "code": 120,
      "ignoreComments": true,
    }]
  }
}
